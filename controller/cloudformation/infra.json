{
  "Parameters": {
    "environment": {
      "AllowedPattern": "^[a-z0-9]+$",
      "Description": "Name of the environment in lower-case (e.g. 'tomy', 'ci', 'aslive' or 'production' - /^[a-z0-9]+$/).",
      "Type": "String"
    },
    "keyName": {
      "Description": "SSH key name for accessing the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "privateSubnet": {
      "Description": "Private subnets in VPC as comma separated values. eg subnet-72852a05,subnet-1e428247,subnet-5980063c",
      "Default": "subnet-72852a05,subnet-1e428247,subnet-5980063c",
      "Type": "CommaDelimitedList"
    },
    "vpc": {
      "Description": "The id of the VPC that this should be launched into (/^vpc-[0-9a-f]+$/).",
      "Type": "AWS::EC2::VPC::Id"
    },
    "controllerInstanceType": {
      "AllowedPattern": "^[a-z0-9]+\\.[a-z0-9]+$",
      "Description": "The EC2 instance type e.g. m3.medium (/^[a-z0-9]+\\.[a-z0-9]+$/).",
      "Type": "String"
    },
    "dockerInstanceType": {
      "AllowedPattern": "^[a-z0-9]+\\.[a-z0-9]+$",
      "Description": "The EC2 instance type e.g. m3.medium (/^[a-z0-9]+\\.[a-z0-9]+$/).",
      "Type": "String"
    }
  },
  "Mappings": {
    "InstanceMappings": {
      "controller": {
        "imageId": "ami-e1610196",
        "instanceType": "m3.medium",
        "maxInstances": "1",
        "minInstances": "1"
      },
      "dockerhosts": {
        "imageId": "ami-e1610196",
        "instanceType": "m3.xlarge",
        "maxInstances": "3",
        "minInstances": "3"
      }
    }
  },
  "Resources": {
    "ControllerASG": {
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "a"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "b"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "c"
              ]
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "ControllerLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ELB"
          }
        ],
        "MaxSize": {
          "Fn::FindInMap": [ "InstanceMappings", "controller", "maxInstances"  ]
        },
        "MinSize": {
          "Fn::FindInMap": [ "InstanceMappings", "controller", "minInstances"  ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "environment"
                  },
                  "PaaS-controller"
                ]
              ]
            }
          }
        ],
        "VPCZoneIdentifier": {
          "Ref": "privateSubnet"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },

    "DockerASG": {
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "a"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "b"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "c"
              ]
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "DockerhostsLaunchConfig"
        },
        "MaxSize": {
          "Fn::FindInMap": [ "InstanceMappings", "dockerhosts", "maxInstances"  ]
        },
        "MinSize": {
          "Fn::FindInMap": [ "InstanceMappings", "dockerhosts", "minInstances"  ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "environment"
                  },
                  "PaaS-dockerhosts"
                ]
              ]
            }
          }
        ],
        "VPCZoneIdentifier": {
          "Ref": "privateSubnet"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "ELB": {
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 10
        },
        "CrossZone": "true",
        "HealthCheck": {
          "HealthyThreshold": 2,
          "Interval": 5,
          "Target": "TCP:80",
          "Timeout": 4,
          "UnhealthyThreshold": 2
        },
        "Listeners": [
          {
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBSecurityGroup"
          }
        ],
        "Subnets": {
          "Ref": "privateSubnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "environment"
                  },
                  "PaaS Controller load balancer"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "ELBSecurityGroup": {
      "Properties": {
        "GroupDescription": "Security group to identify traffic from the load balancer",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.169.0.0/21",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "environment"
                  },
                  "PaaS",
                  "load balancer security group"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "InstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "ControllerSecurityGroup": {
      "Properties": {
        "GroupDescription": "Security group to protect the EC2 instances",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.0.0/8",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "ELBSecurityGroup"
            },
            "ToPort": "80"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "environment"
                  },
                  "PaaS controller",
                  "security group"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "DockerHostsSecurityGroup": {
      "Properties": {
        "GroupDescription": "Security group to protect the EC2 instances",
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.0.0/8",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "ControllerSecurityGroup"
            },
            "ToPort": "80"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " ",
                [
                  {
                    "Ref": "environment"
                  },
                  "PaaS controller",
                  "security group"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },


    "ControllerLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "false",
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [ "InstanceMappings", "controller", "imageId"  ]
        },
        "InstanceType": {
          "Fn::FindInMap": [ "InstanceMappings", "controller", "instanceType"  ]
        },
        "KeyName": {
          "Ref": "keyName"
        },
        "SecurityGroups": [
          {
            "Ref": "ControllerSecurityGroup"
          }
        ]

      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"

    },
    "DockerhostsLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "false",
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [ "InstanceMappings", "dockerhosts", "imageId"  ]
        },
        "InstanceType": {
          "Fn::FindInMap": [ "InstanceMappings", "dockerhosts", "instanceType"  ]
        },
        "KeyName": {
          "Ref": "keyName"
        },
        "SecurityGroups": [
          {
            "Ref": "DockerHostsSecurityGroup"
          }
        ]

      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"

    },
    "Role": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "elasticloadbalancing:DescribeInstanceHealth",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "ec2:AssociateAddress",
                    "ec2:DescribeAddresses"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Policy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    }
  }
}
